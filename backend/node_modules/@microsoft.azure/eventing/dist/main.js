"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("events");
const polyfill_1 = require("@microsoft.azure/polyfill");
class UnintializedPromiseException extends polyfill_1.Exception {
    constructor(message = "Promise was not initialized prior to use.", exitCode = 1) {
        super(message, exitCode);
        this.exitCode = exitCode;
        Object.setPrototypeOf(this, UnintializedPromiseException.prototype);
    }
}
exports.UnintializedPromiseException = UnintializedPromiseException;
class EventDispatcher {
    constructor(instance, name) {
        this._subscriptions = new Array();
        this._instance = instance;
        this._name = name;
    }
    UnsubscribeAll() {
        // call all the unsubscribes 
        for (let each of this._subscriptions) {
            each();
        }
        // and clear the subscriptions.
        this._subscriptions.length = 0;
    }
    Subscribe(fn) {
        if (fn) {
            this._instance.addListener(this._name, fn);
        }
        let unsub = () => { this.Unsubscribe(fn); };
        this._subscriptions.push(unsub);
        return unsub;
    }
    Unsubscribe(fn) {
        if (fn) {
            this._instance.removeListener(this._name, fn);
        }
    }
    Dispatch(args) {
        this._instance.emit(this._name, this._instance, args);
    }
}
exports.EventDispatcher = EventDispatcher;
class EventEmitter extends events.EventEmitter {
    constructor() {
        super();
        this._subscriptions = new Map();
        this._init(this);
    }
    static Event(target, propertyKey) {
        var init = target._init;
        target._init = (instance) => {
            let i = instance;
            // call previous init
            init.bind(instance)(instance);
            instance._subscriptions.set(propertyKey, new EventDispatcher(instance, propertyKey));
            var prop = {
                enumerable: true,
                get: () => {
                    return instance._subscriptions.get(propertyKey);
                }
            };
            Object.defineProperty(instance, propertyKey, prop);
        };
    }
    ;
    _init(t) {
    }
}
exports.EventEmitter = EventEmitter;
class EventEmitterPromise extends EventEmitter {
    constructor(promise) {
        super();
        this.promise = promise;
    }
    initialize(promise) {
        this.promise = promise;
        return this;
    }
    get [Symbol.toStringTag]() {
        if (!this.promise) {
            throw new UnintializedPromiseException();
        }
        return this.promise[Symbol.toStringTag];
    }
    then(onfulfilled, onrejected) {
        if (!this.promise) {
            throw new UnintializedPromiseException();
        }
        return this.promise.then(onfulfilled, onrejected);
    }
    ;
    catch(onrejected) {
        if (!this.promise) {
            throw new UnintializedPromiseException();
        }
        return this.promise.catch(onrejected);
    }
}
exports.EventEmitterPromise = EventEmitterPromise;
class Progress extends EventEmitter {
    constructor(initialize) {
        super();
        this.started = false;
        if (initialize) {
            initialize(this);
        }
    }
    NotifyProgress(percent) {
        if (!this.started) {
            this.started = true;
            this.Start.Dispatch(null);
        }
        this.Progress.Dispatch(percent);
    }
    NotifyEnd() {
        this.End.Dispatch(null);
    }
    NotifyMessage(text) {
        this.Message.Dispatch(text);
    }
}
__decorate([
    EventEmitter.Event
], Progress.prototype, "Progress", void 0);
__decorate([
    EventEmitter.Event
], Progress.prototype, "End", void 0);
__decorate([
    EventEmitter.Event
], Progress.prototype, "Start", void 0);
__decorate([
    EventEmitter.Event
], Progress.prototype, "Message", void 0);
exports.Progress = Progress;
//# sourceMappingURL=main.js.map