/// <reference types="node" />
import * as events from "events";
import { Exception } from "@microsoft.azure/polyfill";
export declare class UnintializedPromiseException extends Exception {
    exitCode: number;
    constructor(message?: string, exitCode?: number);
}
export interface IEvent<TSender extends events.EventEmitter, TArgs> {
    Subscribe(fn: (sender: TSender, args: TArgs) => void): () => void;
    Unsubscribe(fn: (sender: TSender, args: TArgs) => void): void;
    Dispatch(args: TArgs): void;
}
export declare class EventDispatcher<TSender extends EventEmitter, TArgs> implements IEvent<TSender, TArgs> {
    private _instance;
    private _name;
    private _subscriptions;
    constructor(instance: TSender, name: string);
    UnsubscribeAll(): void;
    Subscribe(fn: (sender: TSender, args: TArgs) => void): () => void;
    Unsubscribe(fn: (sender: TSender, args: TArgs) => void): void;
    Dispatch(args: TArgs): void;
}
export declare class EventEmitter extends events.EventEmitter {
    private _subscriptions;
    constructor();
    protected static Event<TSender extends EventEmitter, TArgs>(target: TSender, propertyKey: string): void;
    protected _init(t: EventEmitter): void;
}
export declare class EventEmitterPromise<T> extends EventEmitter implements Promise<T> {
    private promise;
    constructor(promise: Promise<T> | undefined);
    initialize(promise: Promise<T>): this;
    readonly [Symbol.toStringTag]: "Promise";
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
}
export declare type Subscribe = (instance: Progress) => void;
export declare class Progress extends EventEmitter {
    Progress: IEvent<Progress, number>;
    End: IEvent<Progress, null>;
    Start: IEvent<Progress, null>;
    Message: IEvent<Progress, string>;
    private started;
    constructor(initialize: Subscribe);
    NotifyProgress(percent: number): void;
    NotifyEnd(): void;
    NotifyMessage(text: string): void;
}
