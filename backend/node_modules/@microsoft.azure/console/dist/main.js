"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const _marked = require("marked");
const chalk = require("chalk");
const yargs = require("yargs");
const util = require("util");
const MemoryStream = require("memorystream");
const markedTerminal = require("marked-terminal");
_marked.setOptions({
    renderer: new markedTerminal({
        heading: chalk.green.bold,
        firstHeading: chalk.green.bold.underline,
        showSectionPrefix: false,
        strong: chalk.bold.cyan,
        em: chalk.underline,
        blockquote: chalk.reset.gray,
        code: chalk.reset.cyan,
        codespan: chalk.reset.bold.gray,
        tableOptions: {
            chars: {
                'top': '', 'top-mid': '', 'top-left': '', 'top-right': '',
                'bottom': '', 'bottom-mid': '', 'bottom-left': '', 'bottom-right': '',
                'left': '', 'left-mid': '', 'mid': '', 'mid-mid': '',
                'right': '', 'right-mid': '', 'middle': ''
            }
        },
        tab: 2
    })
});
global.console_monkeypatched = false;
function rtrim(str, trimRegEx) {
    return trimRegEx ? str.replace(new RegExp(trimRegEx + "*$"), '') : str.replace(/\s*$/, '');
}
let pad2 = (n) => n <= 99 ? ("0" + n).slice(-2) : n;
const _quiet = yargs.argv.quiet;
const _verbose = yargs.argv.verbose;
const _debug = yargs.argv.debug;
// reset so we can start fresh...
yargs.reset();
function marked(s) {
    if (s) {
        return _marked(s.replace(/\\\./g, `\\\\.`));
    }
    return s;
}
/**
 * Enables Perks console enhancements
 * - monkeypatches node's console
 * - implicitly supports markdown
 * - works thru stdout/stderr
 * @param {redirectStreams} - redirects original process. stderr/stdout streams to memory streams to stop errant output from libraries (ie, NPM)
 */
function enhanceConsole() {
    if (!global.console_monkeypatched) {
        const log = console.log;
        const error = console.error;
        const warn = console.warn;
        const info = console.info;
        // const debug = console.debug;
        const trace = console.trace;
        const stdout = process.stdout;
        const stderr = process.stderr;
        console.log = (message, ...optionalParams) => {
            if (!_quiet) {
                if (stdout.isTTY) {
                    stdout.write(rtrim(marked(rtrim(`${util.format(message, ...optionalParams)}`))) + '\n');
                }
                else {
                    stdout.write(util.format(message, ...optionalParams) + '\n');
                }
            }
        };
        console.info = (message, ...optionalParams) => {
            // spit this out regardless to console.log directly. Not Processed.
            log(message, ...optionalParams);
        };
        console.error = (message, ...optionalParams) => {
            if (stderr.isTTY) {
                stderr.write(rtrim(marked(rtrim(`${util.format(message, ...optionalParams)}`))) + '\n');
            }
            else {
                stderr.write(util.format(message, ...optionalParams) + '\n');
            }
        };
        console.trace = (message, ...optionalParams) => {
            if (_debug) {
                if (stdout.isTTY) {
                    stdout.write(chalk.bold.yellow(`[${Timestamp()}] `) + rtrim(marked(rtrim(`${util.format(message, ...optionalParams)}`))) + '\n');
                }
                else {
                    stdout.write(NoColorTimestamp() + util.format(message, ...optionalParams) + '\n');
                }
            }
        };
        console.warn = (message, ...optionalParams) => {
            if (!_quiet) {
                if (stdout.isTTY) {
                    stdout.write(rtrim(marked(rtrim(`${util.format(message, ...optionalParams)}`))) + '\n');
                }
                else {
                    stdout.write(util.format(message, ...optionalParams) + '\n');
                }
            }
        };
        global.console_monkeypatched = true;
    }
    return true;
}
exports.enhanceConsole = enhanceConsole;
function Timestamp() {
    const m = new Date();
    const hh = `${pad2(m.getHours())}`;
    const mm = `${pad2(m.getMinutes())}`;
    const ss = `${pad2(m.getSeconds())}`;
    return chalk.red(`${chalk.gray(hh)}:${chalk.gray(mm)}:${chalk.gray(ss)}`);
}
exports.Timestamp = Timestamp;
function NoColorTimestamp() {
    const m = new Date();
    const hh = `${pad2(m.getHours())}`;
    const mm = `${pad2(m.getMinutes())}`;
    const ss = `${pad2(m.getSeconds())}`;
    return `${hh}:${mm}:${ss}`;
}
exports.NoColorTimestamp = NoColorTimestamp;
let _copyright = "Copyright 2017.";
let _title = "";
let _name = "$0";
exports.cli = yargs;
exports.cli.app = (name) => {
    _name = name;
    exports.cli.$0 = name;
    exports.cli.usage(`# ${_title}\n${_copyright}\n## Usage: ${_name} <command> [options]`);
    return exports.cli;
};
exports.cli.copyright = (text) => {
    _copyright = text;
    exports.cli.usage(`# ${_title}\n${_copyright}\n## Usage: ${_name} <command> [options]`);
    return exports.cli;
};
exports.cli.title = (text) => {
    _title = text;
    exports.cli.usage(`# ${_title}\n${_copyright}\n## Usage: ${_name} <command> [options]`);
    return exports.cli;
};
exports.cli
    .wrap(0)
    .help('help', "`Show help`")
    .option("quiet", {
    describe: "`suppress most output information`",
    type: "boolean",
}).option("verbose", {
    describe: "`display verbose logging information`",
    type: "boolean",
})
    .option("debug", {
    describe: "`display debug logging information`",
    type: "boolean",
})
    .usage(`# ${_title}\n${_copyright}\n## Usage: ${_name} <command> [options]`);
//# sourceMappingURL=main.js.map