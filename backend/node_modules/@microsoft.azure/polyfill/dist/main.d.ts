/// <reference types="node" />
import { EventEmitter } from "events";
export * from './lib/exception';
export * from './lib/outstanding-task-awaiter';
export * from "./lib/lazy-promise";
export * from "./lib/lazy";
/**
 * Creates a shallow copy of a given object by copying the properties to a new object
 * Note: this does not copy the method prototypes, so it's a shallow data copy only.
 *
 * @param {input} any javascript object
 * @param {filter} Array<string> of properties to filter out from the copy.
 */
export declare function shallowCopy(input: any, ...filter: Array<string>): any;
export declare function Delay(delayMS: number): Promise<void>;
export declare class ManualPromise<T> implements Promise<T> {
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): Promise<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined): Promise<T | TResult>;
    readonly [Symbol.toStringTag]: "Promise";
    resolve: (value?: T | PromiseLike<T> | undefined) => void;
    reject: (e: any) => void;
    private p;
    constructor();
}
export declare class CriticalSection {
    private promise;
    enter(): Promise<void>;
    exit(): Promise<void>;
}
/**
 * Asynchronously waits for the predicate condition to turn false, with a delay between checks
 * @param predicate - a fn that returns a boolean
 * @param delay - number of milliseconds to async delay between checks.
 */
export declare function While(predicate: () => boolean, delay?: number): Promise<void>;
/**
 * Asynchronously waits for the predicate condition to turn true, with a delay between checks
 * @param predicate - a fn that returns a boolean
 * @param delay - number of milliseconds to async delay between checks.
 */
export declare function Until(predicate: () => boolean, delay?: number): Promise<void>;
/**
 * An async wrapper for waiting for an event to trigger once
 * @param emitter - an event emitter
 * @param event - the name of the event to wait for.
 */
export declare function When<T>(emitter: EventEmitter, event: string): Promise<T>;
